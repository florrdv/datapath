LOADMEM
########
# MAIN #
########
# For debugging purposes
zero r1                             # 0

# Let's save a constant 1 in r1
ori r1 1                            # 1

# Let's initialize the stack pointer in register 6
# We'll have a stack that grows downwards and a stack pointer that points
# to the first free address
lui r6 111111                       # 2
ori r6 111111                       # 3

jal 7                               # 4
jal 21                              # 5

j 42                                # 6

##################
# INITIALIZATION #
##################
# Update stack
sw r7 r6 0                          # 7, write $ra to stack
sub r6 r6 r1                        # 8, stack pointer - 1

# Logic

# We'll store:
# the array pointer in register 2
# the length of the array in register 3
zero r2                             # 9
zero r3                             # 10
ori r2 0                            # 11
ori r3 32                           # 12

# LOOP START
# If we've reached the end, continue
eq r4 r2 r3                         # 13, will set r5 to 1 if r3 and r4 are not the same
brnz r4 3                           # 14, 18 - 14 - 1 = 3

# Store the current index in the array at the current index
sw r2 r2 0                          # 15

# Increment the array pointer
add r2 r2 r1                        # 16
j 13                                # 17

# LOOP END

# Update stack
add r6 r6 r1                        # 18, write $ra to stack
lw r7 r6 0                          # 19, stack pointer - 1

# Return
jr r7 0                             # 20

######################
# GET LOWEST ELEMENT #
######################
# Update stack
sw r7 r6 0                          # 21, write $ra to stack
sub r6 r6 r1                        # 22, stack pointer - 1

# Logic

# We'll store
# the array pointer in register 2
# the length of the array in register 3
# the lowest item in register 4
zero r2                             # 23
zero r3                             # 24 
ori r2 1                            # 25, initialized to 1 as we don't need to check the first element again
ori r3 32                           # 26
lw r4 r0 0                          # 27, initialized to first element

# LOOP START
# If we've reached the end, continue
eq r5 r2 r3                         # 28, will set r5 to 1 if r3 and r4 are not the same
brnz r5 7                           # 29, 37 - 29 - 1 = 7

# Load the next element and check if it's smaller
lw r5 r2 0                          # 30
gt r5 r5 r4                         # 31
brnz r5 2                           # 32, 35 - 32 - 1 = 2

# The element is smaller, load it again as we had to sacrifice the register
lw r5 r2 0                          # 33
cp r4 r5                            # 34

# Increment and loop again
add r2 r2 r1                        # 35
j 28                                # 36

# LOOP END
# Save the element after the array leaving one empty address
add r2 r2 r1                        # 37
sw r4 r2 0                          # 38

# Update stack
add r6 r6 r1                        # 39, stack pointer + 1
lw r7 r6 0                          # 40

# Return
jr r7 0                             # 41

CHECKMEM
pc: 42
END
